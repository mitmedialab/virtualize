#!/bin/bash

function install_tool_node() {
    if [[ ! $VIRTUALIZE_ROOT ]]; then
        echo "Error: VIRTUALIZE_ROOT not found, something is wrong"
        exit 33;
    fi

    if [[ -d $VIRTUALIZE_ROOT/virtualize-node ]]; then
        echo "virtualize-node node seems to already be installed"
        exit
    fi

    VERSION=16.13.2
    if [[ $VIRTUALIZE_NODE_VERSION ]]; then
        VERSION="$VIRTUALIZE_NODE_VERSION"
    fi
    if [[ $2 ]]; then
        VERSION="$2"
    fi
    (
        cd $VIRTUALIZE_ROOT
        git submodule add git@github.com:mitmedialab/virtualize-node.git
        #./node/setup.sh $VIRTUALIZE_ROOT/virtualize-node/node $VERSION
        cd $VIRTUALIZE_ROOT/virtualize-node
        ./setup.sh $VERSION
    )
    echo
    echo "before you can use node in your shell you will need to type:"
    echo "  reactivate"
}


function install_tool_python() {
    if [[ ! $VIRTUALIZE_ROOT ]]; then
        echo "Error: VIRTUALIZE_ROOT not found, something is wrong"
        exit 33;
    fi

    if [[ -d $VIRTUALIZE_ROOT/virtualize-python ]]; then
        echo "virtualize-python seems to already be installed"
        exit
    fi

    VERSION=3
    if [[ $VIRTUALIZE_PYTHON_VERSION ]]; then
        VERSION="$VIRTUALIZE_PYTHON_VERSION"
    fi
    if [[ $2 ]]; then
        VERSION="$2"
    fi
    (
        cd $VIRTUALIZE_ROOT
        git submodule add git@github.com:mitmedialab/virtualize-python
        cd $VIRTUALIZE_ROOT/virtualize-python
        ./setup.sh $VERSION
    )
    echo
    echo "before you can use python in your shell you will need to type:"
    echo "  reactivate"
}


function install_tool_miniconda() {
    if [[ ! $VIRTUALIZE_ROOT ]]; then
        echo "Error: VIRTUALIZE_ROOT not found, something is wrong"
        exit 33;
    fi

    if [[ -d $VIRTUALIZE_ROOT/virtualize-miniconda ]]; then
        echo "virtualize-miniconda seems to already be installed"
        exit
    fi

    VERSION="3-py38_4.12.0"
    if [[ $VIRTUALIZE_MINICONDA_VERSION ]]; then
        VERSION="$VIRTUALIZE_MINICONDA_VERSION"
    fi
    if [[ $2 ]]; then
        VERSION="$2"
    fi
    (
        cd $VIRTUALIZE_ROOT
        git submodule add git@github.com:mitmedialab/virtualize-miniconda
        cd $VIRTUALIZE_ROOT/virtualize-miniconda
        ./setup.sh $VERSION
    )
    echo
    echo "before you can use miniconda in your shell you will need to type:"
    echo "  reactivate"
    echo "(and you will probably need to activate a conda project)"
}


function install_tool_macports() {
    #FIXME ignoring version for now
    if [[ ! $VIRTUALIZE_ROOT ]]; then
        echo "Error: VIRTUALIZE_ROOT not found, something is wrong"
        exit 33;
    fi

    if [[ -d $VIRTUALIZE_ROOT/virtualize-macports ]]; then
        echo "virtualize-macports seems to already be installed"
        exit
    fi

    (
        cd $VIRTUALIZE_ROOT
        git submodule add git@github.com:mitmedialab/virtualize-macports
        cd $VIRTUALIZE_ROOT/virtualize-macports
        ./setup.sh
    )
    echo
    echo "before you can use port (macports) in your shell you will need to type:"
    echo "  reactivate"
}


function install_tool_homebrew() {
    #FIXME ignoring version for now
    if [[ ! $VIRTUALIZE_ROOT ]]; then
        echo "Error: VIRTUALIZE_ROOT not found, something is wrong"
        exit 33;
    fi

    if [[ -d $VIRTUALIZE_ROOT/virtualize-homebrew ]]; then
        echo "virtualize-homebrew seems to already be installed"
        exit
    fi

    (
        cd $VIRTUALIZE_ROOT
        git submodule add git@github.com:mitmedialab/virtualize-homebrew
        cd $VIRTUALIZE_ROOT/virtualize-homebrew
        ./setup.sh
    )
    echo
    echo "before you can use brew (homebrew) in your shell you will need to type:"
    echo "  reactivate"
}


function install_tool_rust() {
    #FIXME ignoring version for now
    if [[ ! $VIRTUALIZE_ROOT ]]; then
        echo "Error: VIRTUALIZE_ROOT not found, something is wrong"
        exit 33;
    fi

    if [[ -d $VIRTUALIZE_ROOT/virtualize-rust ]]; then
        echo "virtualize-rust seems to already be installed"
        exit
    fi

    (
        cd $VIRTUALIZE_ROOT
        git submodule add git@github.com:mitmedialab/virtualize-rust
        cd $VIRTUALIZE_ROOT/virtualize-rust
        ./setup.sh
    )
    echo
    echo "before you can use rust in your shell you will need to type:"
    echo "  reactivate"
}


function add_virtual_tool() {
    case "$1" in
        node) install_tool_node "$@"; exit ;;
        python) install_tool_python "$@"; exit ;;
        miniconda|conda) install_tool_miniconda "$@"; exit ;;
        macports|port) install_tool_macports "$@"; exit ;;
        homebrew|brew) install_tool_homebrew "$@"; exit ;;
        rust) install_tool_rust "$@"; exit ;;
        *) echo "unknown tool $1, type 'virtualize help' for list of tools"; exit ;;
    esac
}


display_help() {
  cat <<-EOF

Usage: virtualize [COMMAND] [args]

Commands:

  add <tool> [version]   Add the given virtualize tool, at the optional [version]

Options:

  -h, --help            Display help information

Tools:

  node
  python
  miniconda
  homebrew
  macports
  rust

EOF
}

#
# Handle arguments.
#

# First pass. Process the options so they can come before or after commands,
# particularly for `n lsr --all` and `n install --arch x686`
# which feel pretty natural.

unprocessed_args=()
positional_arg="false"

while [[ $# -ne 0 ]]; do
    case "$1" in
        -V|--version) display_virtualize_version ;;
        -h|--help|help) display_help; exit ;;

        exec|run|as|use)
            unprocessed_args+=( "$1" )
            positional_arg="true"
            ;;
        *)
            if [[ "${positional_arg}" == "true" ]]; then
                unprocessed_args+=( "$@" )
                break
            fi
            unprocessed_args+=( "$1" )
            ;;
    esac
    shift
done

set -- "${unprocessed_args[@]}"

if test $# -eq 0; then
    #test -z "$(display_versions_paths)" && err_no_installed_print_help
    #menu_select_cache_versions
    display_help
else
    while test $# -ne 0; do
        case "$1" in
            help) display_help; exit ;;
            add) add_virtual_tool "$2" "$3"; exit ;;
            #bin|which) display_bin_path_for_version "$2"; exit ;;
            #run|as|use) shift; run_with_version "$@"; exit ;;
            #doctor) show_diagnostics; exit ;;
            #ls|list) display_versions_paths; exit ;;
            #*) install "$1"; exit ;;
        esac
    shift
  done
fi
